//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public IsMovingComponent isMoving { get { return (IsMovingComponent)GetComponent(GameComponentsLookup.IsMoving); } }
    public bool hasIsMoving { get { return HasComponent(GameComponentsLookup.IsMoving); } }

    public void AddIsMoving(bool newValue) {
        var index = GameComponentsLookup.IsMoving;
        var component = (IsMovingComponent)CreateComponent(index, typeof(IsMovingComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceIsMoving(bool newValue) {
        var index = GameComponentsLookup.IsMoving;
        var component = (IsMovingComponent)CreateComponent(index, typeof(IsMovingComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveIsMoving() {
        RemoveComponent(GameComponentsLookup.IsMoving);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherIsMoving;

    public static Entitas.IMatcher<GameEntity> IsMoving {
        get {
            if (_matcherIsMoving == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.IsMoving);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherIsMoving = matcher;
            }

            return _matcherIsMoving;
        }
    }
}
