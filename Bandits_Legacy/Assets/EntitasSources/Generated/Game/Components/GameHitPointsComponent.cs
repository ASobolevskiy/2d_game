//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public HitPointsComponent hitPoints { get { return (HitPointsComponent)GetComponent(GameComponentsLookup.HitPoints); } }
    public bool hasHitPoints { get { return HasComponent(GameComponentsLookup.HitPoints); } }

    public void AddHitPoints(int newValue) {
        var index = GameComponentsLookup.HitPoints;
        var component = (HitPointsComponent)CreateComponent(index, typeof(HitPointsComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceHitPoints(int newValue) {
        var index = GameComponentsLookup.HitPoints;
        var component = (HitPointsComponent)CreateComponent(index, typeof(HitPointsComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveHitPoints() {
        RemoveComponent(GameComponentsLookup.HitPoints);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherHitPoints;

    public static Entitas.IMatcher<GameEntity> HitPoints {
        get {
            if (_matcherHitPoints == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.HitPoints);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherHitPoints = matcher;
            }

            return _matcherHitPoints;
        }
    }
}
